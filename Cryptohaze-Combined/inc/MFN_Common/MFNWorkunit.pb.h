// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MFNWorkunit.proto

#ifndef PROTOBUF_MFNWorkunit_2eproto__INCLUDED
#define PROTOBUF_MFNWorkunit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MFNWorkunit_2eproto();
void protobuf_AssignDesc_MFNWorkunit_2eproto();
void protobuf_ShutdownFile_MFNWorkunit_2eproto();

class MFNWorkunitProtobuf;
class MFNWorkunitProtobuf_SingleWorkunit;

// ===================================================================

class MFNWorkunitProtobuf_SingleWorkunit : public ::google::protobuf::Message {
 public:
  MFNWorkunitProtobuf_SingleWorkunit();
  virtual ~MFNWorkunitProtobuf_SingleWorkunit();
  
  MFNWorkunitProtobuf_SingleWorkunit(const MFNWorkunitProtobuf_SingleWorkunit& from);
  
  inline MFNWorkunitProtobuf_SingleWorkunit& operator=(const MFNWorkunitProtobuf_SingleWorkunit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MFNWorkunitProtobuf_SingleWorkunit& default_instance();
  
  void Swap(MFNWorkunitProtobuf_SingleWorkunit* other);
  
  // implements Message ----------------------------------------------
  
  MFNWorkunitProtobuf_SingleWorkunit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MFNWorkunitProtobuf_SingleWorkunit& from);
  void MergeFrom(const MFNWorkunitProtobuf_SingleWorkunit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 workunit_id = 1;
  inline bool has_workunit_id() const;
  inline void clear_workunit_id();
  static const int kWorkunitIdFieldNumber = 1;
  inline ::google::protobuf::uint64 workunit_id() const;
  inline void set_workunit_id(::google::protobuf::uint64 value);
  
  // optional uint64 start_point = 2;
  inline bool has_start_point() const;
  inline void clear_start_point();
  static const int kStartPointFieldNumber = 2;
  inline ::google::protobuf::uint64 start_point() const;
  inline void set_start_point(::google::protobuf::uint64 value);
  
  // optional uint64 end_point = 3;
  inline bool has_end_point() const;
  inline void clear_end_point();
  static const int kEndPointFieldNumber = 3;
  inline ::google::protobuf::uint64 end_point() const;
  inline void set_end_point(::google::protobuf::uint64 value);
  
  // optional double workunit_requested_timestamp = 4;
  inline bool has_workunit_requested_timestamp() const;
  inline void clear_workunit_requested_timestamp();
  static const int kWorkunitRequestedTimestampFieldNumber = 4;
  inline double workunit_requested_timestamp() const;
  inline void set_workunit_requested_timestamp(double value);
  
  // optional double workunit_completed_timestamp = 5;
  inline bool has_workunit_completed_timestamp() const;
  inline void clear_workunit_completed_timestamp();
  static const int kWorkunitCompletedTimestampFieldNumber = 5;
  inline double workunit_completed_timestamp() const;
  inline void set_workunit_completed_timestamp(double value);
  
  // optional uint32 client_id = 6;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 6;
  inline ::google::protobuf::uint32 client_id() const;
  inline void set_client_id(::google::protobuf::uint32 value);
  
  // optional uint32 is_assigned = 7;
  inline bool has_is_assigned() const;
  inline void clear_is_assigned();
  static const int kIsAssignedFieldNumber = 7;
  inline ::google::protobuf::uint32 is_assigned() const;
  inline void set_is_assigned(::google::protobuf::uint32 value);
  
  // optional uint32 password_length = 8;
  inline bool has_password_length() const;
  inline void clear_password_length();
  static const int kPasswordLengthFieldNumber = 8;
  inline ::google::protobuf::uint32 password_length() const;
  inline void set_password_length(::google::protobuf::uint32 value);
  
  // optional uint32 is_valid = 9;
  inline bool has_is_valid() const;
  inline void clear_is_valid();
  static const int kIsValidFieldNumber = 9;
  inline ::google::protobuf::uint32 is_valid() const;
  inline void set_is_valid(::google::protobuf::uint32 value);
  
  // optional uint32 flags = 10;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 10;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);
  
  // optional bytes additional_data = 11;
  inline bool has_additional_data() const;
  inline void clear_additional_data();
  static const int kAdditionalDataFieldNumber = 11;
  inline const ::std::string& additional_data() const;
  inline void set_additional_data(const ::std::string& value);
  inline void set_additional_data(const char* value);
  inline void set_additional_data(const void* value, size_t size);
  inline ::std::string* mutable_additional_data();
  inline ::std::string* release_additional_data();
  
  // optional bytes wordlist_data = 12;
  inline bool has_wordlist_data() const;
  inline void clear_wordlist_data();
  static const int kWordlistDataFieldNumber = 12;
  inline const ::std::string& wordlist_data() const;
  inline void set_wordlist_data(const ::std::string& value);
  inline void set_wordlist_data(const char* value);
  inline void set_wordlist_data(const void* value, size_t size);
  inline ::std::string* mutable_wordlist_data();
  inline ::std::string* release_wordlist_data();
  
  // optional bytes wordlist_lengths = 13;
  inline bool has_wordlist_lengths() const;
  inline void clear_wordlist_lengths();
  static const int kWordlistLengthsFieldNumber = 13;
  inline const ::std::string& wordlist_lengths() const;
  inline void set_wordlist_lengths(const ::std::string& value);
  inline void set_wordlist_lengths(const char* value);
  inline void set_wordlist_lengths(const void* value, size_t size);
  inline ::std::string* mutable_wordlist_lengths();
  inline ::std::string* release_wordlist_lengths();
  
  // optional uint32 wordlist_block_length = 14;
  inline bool has_wordlist_block_length() const;
  inline void clear_wordlist_block_length();
  static const int kWordlistBlockLengthFieldNumber = 14;
  inline ::google::protobuf::uint32 wordlist_block_length() const;
  inline void set_wordlist_block_length(::google::protobuf::uint32 value);
  
  // optional uint32 number_words_loaded = 15;
  inline bool has_number_words_loaded() const;
  inline void clear_number_words_loaded();
  static const int kNumberWordsLoadedFieldNumber = 15;
  inline ::google::protobuf::uint32 number_words_loaded() const;
  inline void set_number_words_loaded(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:MFNWorkunitProtobuf.SingleWorkunit)
 private:
  inline void set_has_workunit_id();
  inline void clear_has_workunit_id();
  inline void set_has_start_point();
  inline void clear_has_start_point();
  inline void set_has_end_point();
  inline void clear_has_end_point();
  inline void set_has_workunit_requested_timestamp();
  inline void clear_has_workunit_requested_timestamp();
  inline void set_has_workunit_completed_timestamp();
  inline void clear_has_workunit_completed_timestamp();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_is_assigned();
  inline void clear_has_is_assigned();
  inline void set_has_password_length();
  inline void clear_has_password_length();
  inline void set_has_is_valid();
  inline void clear_has_is_valid();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_additional_data();
  inline void clear_has_additional_data();
  inline void set_has_wordlist_data();
  inline void clear_has_wordlist_data();
  inline void set_has_wordlist_lengths();
  inline void clear_has_wordlist_lengths();
  inline void set_has_wordlist_block_length();
  inline void clear_has_wordlist_block_length();
  inline void set_has_number_words_loaded();
  inline void clear_has_number_words_loaded();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 workunit_id_;
  ::google::protobuf::uint64 start_point_;
  ::google::protobuf::uint64 end_point_;
  double workunit_requested_timestamp_;
  double workunit_completed_timestamp_;
  ::google::protobuf::uint32 client_id_;
  ::google::protobuf::uint32 is_assigned_;
  ::google::protobuf::uint32 password_length_;
  ::google::protobuf::uint32 is_valid_;
  ::std::string* additional_data_;
  ::std::string* wordlist_data_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 wordlist_block_length_;
  ::std::string* wordlist_lengths_;
  ::google::protobuf::uint32 number_words_loaded_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_MFNWorkunit_2eproto();
  friend void protobuf_AssignDesc_MFNWorkunit_2eproto();
  friend void protobuf_ShutdownFile_MFNWorkunit_2eproto();
  
  void InitAsDefaultInstance();
  static MFNWorkunitProtobuf_SingleWorkunit* default_instance_;
};
// -------------------------------------------------------------------

class MFNWorkunitProtobuf : public ::google::protobuf::Message {
 public:
  MFNWorkunitProtobuf();
  virtual ~MFNWorkunitProtobuf();
  
  MFNWorkunitProtobuf(const MFNWorkunitProtobuf& from);
  
  inline MFNWorkunitProtobuf& operator=(const MFNWorkunitProtobuf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MFNWorkunitProtobuf& default_instance();
  
  void Swap(MFNWorkunitProtobuf* other);
  
  // implements Message ----------------------------------------------
  
  MFNWorkunitProtobuf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MFNWorkunitProtobuf& from);
  void MergeFrom(const MFNWorkunitProtobuf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MFNWorkunitProtobuf_SingleWorkunit SingleWorkunit;
  
  // accessors -------------------------------------------------------
  
  // repeated .MFNWorkunitProtobuf.SingleWorkunit workunits = 1;
  inline int workunits_size() const;
  inline void clear_workunits();
  static const int kWorkunitsFieldNumber = 1;
  inline const ::MFNWorkunitProtobuf_SingleWorkunit& workunits(int index) const;
  inline ::MFNWorkunitProtobuf_SingleWorkunit* mutable_workunits(int index);
  inline ::MFNWorkunitProtobuf_SingleWorkunit* add_workunits();
  inline const ::google::protobuf::RepeatedPtrField< ::MFNWorkunitProtobuf_SingleWorkunit >&
      workunits() const;
  inline ::google::protobuf::RepeatedPtrField< ::MFNWorkunitProtobuf_SingleWorkunit >*
      mutable_workunits();
  
  // optional uint32 workunit_wait = 2;
  inline bool has_workunit_wait() const;
  inline void clear_workunit_wait();
  static const int kWorkunitWaitFieldNumber = 2;
  inline ::google::protobuf::uint32 workunit_wait() const;
  inline void set_workunit_wait(::google::protobuf::uint32 value);
  
  // optional uint32 no_more_workunits = 3;
  inline bool has_no_more_workunits() const;
  inline void clear_no_more_workunits();
  static const int kNoMoreWorkunitsFieldNumber = 3;
  inline ::google::protobuf::uint32 no_more_workunits() const;
  inline void set_no_more_workunits(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:MFNWorkunitProtobuf)
 private:
  inline void set_has_workunit_wait();
  inline void clear_has_workunit_wait();
  inline void set_has_no_more_workunits();
  inline void clear_has_no_more_workunits();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::MFNWorkunitProtobuf_SingleWorkunit > workunits_;
  ::google::protobuf::uint32 workunit_wait_;
  ::google::protobuf::uint32 no_more_workunits_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MFNWorkunit_2eproto();
  friend void protobuf_AssignDesc_MFNWorkunit_2eproto();
  friend void protobuf_ShutdownFile_MFNWorkunit_2eproto();
  
  void InitAsDefaultInstance();
  static MFNWorkunitProtobuf* default_instance_;
};
// ===================================================================


// ===================================================================

// MFNWorkunitProtobuf_SingleWorkunit

// optional uint64 workunit_id = 1;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_workunit_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_workunit_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_workunit_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_workunit_id() {
  workunit_id_ = GOOGLE_ULONGLONG(0);
  clear_has_workunit_id();
}
inline ::google::protobuf::uint64 MFNWorkunitProtobuf_SingleWorkunit::workunit_id() const {
  return workunit_id_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_workunit_id(::google::protobuf::uint64 value) {
  set_has_workunit_id();
  workunit_id_ = value;
}

// optional uint64 start_point = 2;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_start_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_start_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_start_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_start_point() {
  start_point_ = GOOGLE_ULONGLONG(0);
  clear_has_start_point();
}
inline ::google::protobuf::uint64 MFNWorkunitProtobuf_SingleWorkunit::start_point() const {
  return start_point_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_start_point(::google::protobuf::uint64 value) {
  set_has_start_point();
  start_point_ = value;
}

// optional uint64 end_point = 3;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_end_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_end_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_end_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_end_point() {
  end_point_ = GOOGLE_ULONGLONG(0);
  clear_has_end_point();
}
inline ::google::protobuf::uint64 MFNWorkunitProtobuf_SingleWorkunit::end_point() const {
  return end_point_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_end_point(::google::protobuf::uint64 value) {
  set_has_end_point();
  end_point_ = value;
}

// optional double workunit_requested_timestamp = 4;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_workunit_requested_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_workunit_requested_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_workunit_requested_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_workunit_requested_timestamp() {
  workunit_requested_timestamp_ = 0;
  clear_has_workunit_requested_timestamp();
}
inline double MFNWorkunitProtobuf_SingleWorkunit::workunit_requested_timestamp() const {
  return workunit_requested_timestamp_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_workunit_requested_timestamp(double value) {
  set_has_workunit_requested_timestamp();
  workunit_requested_timestamp_ = value;
}

// optional double workunit_completed_timestamp = 5;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_workunit_completed_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_workunit_completed_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_workunit_completed_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_workunit_completed_timestamp() {
  workunit_completed_timestamp_ = 0;
  clear_has_workunit_completed_timestamp();
}
inline double MFNWorkunitProtobuf_SingleWorkunit::workunit_completed_timestamp() const {
  return workunit_completed_timestamp_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_workunit_completed_timestamp(double value) {
  set_has_workunit_completed_timestamp();
  workunit_completed_timestamp_ = value;
}

// optional uint32 client_id = 6;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_client_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_client_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_client_id() {
  client_id_ = 0u;
  clear_has_client_id();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf_SingleWorkunit::client_id() const {
  return client_id_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_client_id(::google::protobuf::uint32 value) {
  set_has_client_id();
  client_id_ = value;
}

// optional uint32 is_assigned = 7;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_is_assigned() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_is_assigned() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_is_assigned() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_is_assigned() {
  is_assigned_ = 0u;
  clear_has_is_assigned();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf_SingleWorkunit::is_assigned() const {
  return is_assigned_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_is_assigned(::google::protobuf::uint32 value) {
  set_has_is_assigned();
  is_assigned_ = value;
}

// optional uint32 password_length = 8;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_password_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_password_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_password_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_password_length() {
  password_length_ = 0u;
  clear_has_password_length();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf_SingleWorkunit::password_length() const {
  return password_length_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_password_length(::google::protobuf::uint32 value) {
  set_has_password_length();
  password_length_ = value;
}

// optional uint32 is_valid = 9;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_is_valid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_is_valid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_is_valid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_is_valid() {
  is_valid_ = 0u;
  clear_has_is_valid();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf_SingleWorkunit::is_valid() const {
  return is_valid_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_is_valid(::google::protobuf::uint32 value) {
  set_has_is_valid();
  is_valid_ = value;
}

// optional uint32 flags = 10;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_flags() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_flags() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf_SingleWorkunit::flags() const {
  return flags_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional bytes additional_data = 11;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_additional_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_additional_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_additional_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_additional_data() {
  if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
    additional_data_->clear();
  }
  clear_has_additional_data();
}
inline const ::std::string& MFNWorkunitProtobuf_SingleWorkunit::additional_data() const {
  return *additional_data_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_additional_data(const ::std::string& value) {
  set_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    additional_data_ = new ::std::string;
  }
  additional_data_->assign(value);
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_additional_data(const char* value) {
  set_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    additional_data_ = new ::std::string;
  }
  additional_data_->assign(value);
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_additional_data(const void* value, size_t size) {
  set_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    additional_data_ = new ::std::string;
  }
  additional_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MFNWorkunitProtobuf_SingleWorkunit::mutable_additional_data() {
  set_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    additional_data_ = new ::std::string;
  }
  return additional_data_;
}
inline ::std::string* MFNWorkunitProtobuf_SingleWorkunit::release_additional_data() {
  clear_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = additional_data_;
    additional_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes wordlist_data = 12;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_wordlist_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_wordlist_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_wordlist_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_wordlist_data() {
  if (wordlist_data_ != &::google::protobuf::internal::kEmptyString) {
    wordlist_data_->clear();
  }
  clear_has_wordlist_data();
}
inline const ::std::string& MFNWorkunitProtobuf_SingleWorkunit::wordlist_data() const {
  return *wordlist_data_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_wordlist_data(const ::std::string& value) {
  set_has_wordlist_data();
  if (wordlist_data_ == &::google::protobuf::internal::kEmptyString) {
    wordlist_data_ = new ::std::string;
  }
  wordlist_data_->assign(value);
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_wordlist_data(const char* value) {
  set_has_wordlist_data();
  if (wordlist_data_ == &::google::protobuf::internal::kEmptyString) {
    wordlist_data_ = new ::std::string;
  }
  wordlist_data_->assign(value);
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_wordlist_data(const void* value, size_t size) {
  set_has_wordlist_data();
  if (wordlist_data_ == &::google::protobuf::internal::kEmptyString) {
    wordlist_data_ = new ::std::string;
  }
  wordlist_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MFNWorkunitProtobuf_SingleWorkunit::mutable_wordlist_data() {
  set_has_wordlist_data();
  if (wordlist_data_ == &::google::protobuf::internal::kEmptyString) {
    wordlist_data_ = new ::std::string;
  }
  return wordlist_data_;
}
inline ::std::string* MFNWorkunitProtobuf_SingleWorkunit::release_wordlist_data() {
  clear_has_wordlist_data();
  if (wordlist_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wordlist_data_;
    wordlist_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes wordlist_lengths = 13;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_wordlist_lengths() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_wordlist_lengths() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_wordlist_lengths() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_wordlist_lengths() {
  if (wordlist_lengths_ != &::google::protobuf::internal::kEmptyString) {
    wordlist_lengths_->clear();
  }
  clear_has_wordlist_lengths();
}
inline const ::std::string& MFNWorkunitProtobuf_SingleWorkunit::wordlist_lengths() const {
  return *wordlist_lengths_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_wordlist_lengths(const ::std::string& value) {
  set_has_wordlist_lengths();
  if (wordlist_lengths_ == &::google::protobuf::internal::kEmptyString) {
    wordlist_lengths_ = new ::std::string;
  }
  wordlist_lengths_->assign(value);
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_wordlist_lengths(const char* value) {
  set_has_wordlist_lengths();
  if (wordlist_lengths_ == &::google::protobuf::internal::kEmptyString) {
    wordlist_lengths_ = new ::std::string;
  }
  wordlist_lengths_->assign(value);
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_wordlist_lengths(const void* value, size_t size) {
  set_has_wordlist_lengths();
  if (wordlist_lengths_ == &::google::protobuf::internal::kEmptyString) {
    wordlist_lengths_ = new ::std::string;
  }
  wordlist_lengths_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MFNWorkunitProtobuf_SingleWorkunit::mutable_wordlist_lengths() {
  set_has_wordlist_lengths();
  if (wordlist_lengths_ == &::google::protobuf::internal::kEmptyString) {
    wordlist_lengths_ = new ::std::string;
  }
  return wordlist_lengths_;
}
inline ::std::string* MFNWorkunitProtobuf_SingleWorkunit::release_wordlist_lengths() {
  clear_has_wordlist_lengths();
  if (wordlist_lengths_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wordlist_lengths_;
    wordlist_lengths_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 wordlist_block_length = 14;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_wordlist_block_length() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_wordlist_block_length() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_wordlist_block_length() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_wordlist_block_length() {
  wordlist_block_length_ = 0u;
  clear_has_wordlist_block_length();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf_SingleWorkunit::wordlist_block_length() const {
  return wordlist_block_length_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_wordlist_block_length(::google::protobuf::uint32 value) {
  set_has_wordlist_block_length();
  wordlist_block_length_ = value;
}

// optional uint32 number_words_loaded = 15;
inline bool MFNWorkunitProtobuf_SingleWorkunit::has_number_words_loaded() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_has_number_words_loaded() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_has_number_words_loaded() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::clear_number_words_loaded() {
  number_words_loaded_ = 0u;
  clear_has_number_words_loaded();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf_SingleWorkunit::number_words_loaded() const {
  return number_words_loaded_;
}
inline void MFNWorkunitProtobuf_SingleWorkunit::set_number_words_loaded(::google::protobuf::uint32 value) {
  set_has_number_words_loaded();
  number_words_loaded_ = value;
}

// -------------------------------------------------------------------

// MFNWorkunitProtobuf

// repeated .MFNWorkunitProtobuf.SingleWorkunit workunits = 1;
inline int MFNWorkunitProtobuf::workunits_size() const {
  return workunits_.size();
}
inline void MFNWorkunitProtobuf::clear_workunits() {
  workunits_.Clear();
}
inline const ::MFNWorkunitProtobuf_SingleWorkunit& MFNWorkunitProtobuf::workunits(int index) const {
  return workunits_.Get(index);
}
inline ::MFNWorkunitProtobuf_SingleWorkunit* MFNWorkunitProtobuf::mutable_workunits(int index) {
  return workunits_.Mutable(index);
}
inline ::MFNWorkunitProtobuf_SingleWorkunit* MFNWorkunitProtobuf::add_workunits() {
  return workunits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MFNWorkunitProtobuf_SingleWorkunit >&
MFNWorkunitProtobuf::workunits() const {
  return workunits_;
}
inline ::google::protobuf::RepeatedPtrField< ::MFNWorkunitProtobuf_SingleWorkunit >*
MFNWorkunitProtobuf::mutable_workunits() {
  return &workunits_;
}

// optional uint32 workunit_wait = 2;
inline bool MFNWorkunitProtobuf::has_workunit_wait() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MFNWorkunitProtobuf::set_has_workunit_wait() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MFNWorkunitProtobuf::clear_has_workunit_wait() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MFNWorkunitProtobuf::clear_workunit_wait() {
  workunit_wait_ = 0u;
  clear_has_workunit_wait();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf::workunit_wait() const {
  return workunit_wait_;
}
inline void MFNWorkunitProtobuf::set_workunit_wait(::google::protobuf::uint32 value) {
  set_has_workunit_wait();
  workunit_wait_ = value;
}

// optional uint32 no_more_workunits = 3;
inline bool MFNWorkunitProtobuf::has_no_more_workunits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MFNWorkunitProtobuf::set_has_no_more_workunits() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MFNWorkunitProtobuf::clear_has_no_more_workunits() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MFNWorkunitProtobuf::clear_no_more_workunits() {
  no_more_workunits_ = 0u;
  clear_has_no_more_workunits();
}
inline ::google::protobuf::uint32 MFNWorkunitProtobuf::no_more_workunits() const {
  return no_more_workunits_;
}
inline void MFNWorkunitProtobuf::set_no_more_workunits(::google::protobuf::uint32 value) {
  set_has_no_more_workunits();
  no_more_workunits_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MFNWorkunit_2eproto__INCLUDED
