// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MFN_Common/MFNNetworkRPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MFNRPCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MFNRPCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MFNRPCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MFNRPCResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MFNNetworkRPC_2eproto() {
  protobuf_AddDesc_MFNNetworkRPC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MFNNetworkRPC.proto");
  GOOGLE_CHECK(file != NULL);
  MFNRPCRequest_descriptor_ = file->message_type(0);
  static const int MFNRPCRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, found_password_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, found_password_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, system_cracking_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, number_workunits_requested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, submitted_workunit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, additional_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, password_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, algorithm_type_),
  };
  MFNRPCRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MFNRPCRequest_descriptor_,
      MFNRPCRequest::default_instance_,
      MFNRPCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MFNRPCRequest));
  MFNRPCResponse_descriptor_ = file->message_type(1);
  static const int MFNRPCResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, response_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, system_version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, hash_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, hash_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, charset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, password_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, additional_data_),
  };
  MFNRPCResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MFNRPCResponse_descriptor_,
      MFNRPCResponse::default_instance_,
      MFNRPCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNRPCResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MFNRPCResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MFNNetworkRPC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MFNRPCRequest_descriptor_, &MFNRPCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MFNRPCResponse_descriptor_, &MFNRPCResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MFNNetworkRPC_2eproto() {
  delete MFNRPCRequest::default_instance_;
  delete MFNRPCRequest_reflection_;
  delete MFNRPCResponse::default_instance_;
  delete MFNRPCResponse_reflection_;
}

void protobuf_AddDesc_MFNNetworkRPC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MFNNetworkRPC.proto\"\211\002\n\rMFNRPCRequest\022"
    "\022\n\nrequest_id\030\001 \001(\r\022\034\n\024found_password_va"
    "lue\030\002 \001(\014\022\033\n\023found_password_hash\030\003 \001(\014\022\034"
    "\n\024system_cracking_rate\030\004 \001(\004\022\"\n\032number_w"
    "orkunits_requested\030\005 \001(\r\022\035\n\025submitted_wo"
    "rkunit_id\030\006 \001(\004\022\027\n\017additional_data\030\007 \001(\014"
    "\022\027\n\017password_length\030\010 \001(\r\022\026\n\016algorithm_t"
    "ype\030\t \001(\r\"\267\001\n\016MFNRPCResponse\022\030\n\020response"
    "_type_id\030\001 \001(\r\022\031\n\021system_version_id\030\002 \001("
    "\r\022\024\n\014hash_type_id\030\003 \001(\r\022\024\n\014hash_file_id\030"
    "\004 \001(\r\022\022\n\ncharset_id\030\005 \001(\r\022\027\n\017password_le"
    "ngth\030\006 \001(\r\022\027\n\017additional_data\030\007 \001(\014", 475);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MFNNetworkRPC.proto", &protobuf_RegisterTypes);
  MFNRPCRequest::default_instance_ = new MFNRPCRequest();
  MFNRPCResponse::default_instance_ = new MFNRPCResponse();
  MFNRPCRequest::default_instance_->InitAsDefaultInstance();
  MFNRPCResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MFNNetworkRPC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MFNNetworkRPC_2eproto {
  StaticDescriptorInitializer_MFNNetworkRPC_2eproto() {
    protobuf_AddDesc_MFNNetworkRPC_2eproto();
  }
} static_descriptor_initializer_MFNNetworkRPC_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MFNRPCRequest::kRequestIdFieldNumber;
const int MFNRPCRequest::kFoundPasswordValueFieldNumber;
const int MFNRPCRequest::kFoundPasswordHashFieldNumber;
const int MFNRPCRequest::kSystemCrackingRateFieldNumber;
const int MFNRPCRequest::kNumberWorkunitsRequestedFieldNumber;
const int MFNRPCRequest::kSubmittedWorkunitIdFieldNumber;
const int MFNRPCRequest::kAdditionalDataFieldNumber;
const int MFNRPCRequest::kPasswordLengthFieldNumber;
const int MFNRPCRequest::kAlgorithmTypeFieldNumber;
#endif  // !_MSC_VER

MFNRPCRequest::MFNRPCRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MFNRPCRequest::InitAsDefaultInstance() {
}

MFNRPCRequest::MFNRPCRequest(const MFNRPCRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MFNRPCRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  found_password_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  found_password_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  system_cracking_rate_ = GOOGLE_ULONGLONG(0);
  number_workunits_requested_ = 0u;
  submitted_workunit_id_ = GOOGLE_ULONGLONG(0);
  additional_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_length_ = 0u;
  algorithm_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MFNRPCRequest::~MFNRPCRequest() {
  SharedDtor();
}

void MFNRPCRequest::SharedDtor() {
  if (found_password_value_ != &::google::protobuf::internal::kEmptyString) {
    delete found_password_value_;
  }
  if (found_password_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete found_password_hash_;
  }
  if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
    delete additional_data_;
  }
  if (this != default_instance_) {
  }
}

void MFNRPCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MFNRPCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MFNRPCRequest_descriptor_;
}

const MFNRPCRequest& MFNRPCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MFNNetworkRPC_2eproto();  return *default_instance_;
}

MFNRPCRequest* MFNRPCRequest::default_instance_ = NULL;

MFNRPCRequest* MFNRPCRequest::New() const {
  return new MFNRPCRequest;
}

void MFNRPCRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    if (has_found_password_value()) {
      if (found_password_value_ != &::google::protobuf::internal::kEmptyString) {
        found_password_value_->clear();
      }
    }
    if (has_found_password_hash()) {
      if (found_password_hash_ != &::google::protobuf::internal::kEmptyString) {
        found_password_hash_->clear();
      }
    }
    system_cracking_rate_ = GOOGLE_ULONGLONG(0);
    number_workunits_requested_ = 0u;
    submitted_workunit_id_ = GOOGLE_ULONGLONG(0);
    if (has_additional_data()) {
      if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
        additional_data_->clear();
      }
    }
    password_length_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    algorithm_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MFNRPCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_found_password_value;
        break;
      }
      
      // optional bytes found_password_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_found_password_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_found_password_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_found_password_hash;
        break;
      }
      
      // optional bytes found_password_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_found_password_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_found_password_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_system_cracking_rate;
        break;
      }
      
      // optional uint64 system_cracking_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_cracking_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &system_cracking_rate_)));
          set_has_system_cracking_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_number_workunits_requested;
        break;
      }
      
      // optional uint32 number_workunits_requested = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_workunits_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_workunits_requested_)));
          set_has_number_workunits_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_submitted_workunit_id;
        break;
      }
      
      // optional uint64 submitted_workunit_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_submitted_workunit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &submitted_workunit_id_)));
          set_has_submitted_workunit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_additional_data;
        break;
      }
      
      // optional bytes additional_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_additional_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_password_length;
        break;
      }
      
      // optional uint32 password_length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &password_length_)));
          set_has_password_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_algorithm_type;
        break;
      }
      
      // optional uint32 algorithm_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algorithm_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &algorithm_type_)));
          set_has_algorithm_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MFNRPCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }
  
  // optional bytes found_password_value = 2;
  if (has_found_password_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->found_password_value(), output);
  }
  
  // optional bytes found_password_hash = 3;
  if (has_found_password_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->found_password_hash(), output);
  }
  
  // optional uint64 system_cracking_rate = 4;
  if (has_system_cracking_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->system_cracking_rate(), output);
  }
  
  // optional uint32 number_workunits_requested = 5;
  if (has_number_workunits_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->number_workunits_requested(), output);
  }
  
  // optional uint64 submitted_workunit_id = 6;
  if (has_submitted_workunit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->submitted_workunit_id(), output);
  }
  
  // optional bytes additional_data = 7;
  if (has_additional_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->additional_data(), output);
  }
  
  // optional uint32 password_length = 8;
  if (has_password_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->password_length(), output);
  }
  
  // optional uint32 algorithm_type = 9;
  if (has_algorithm_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->algorithm_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MFNRPCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }
  
  // optional bytes found_password_value = 2;
  if (has_found_password_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->found_password_value(), target);
  }
  
  // optional bytes found_password_hash = 3;
  if (has_found_password_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->found_password_hash(), target);
  }
  
  // optional uint64 system_cracking_rate = 4;
  if (has_system_cracking_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->system_cracking_rate(), target);
  }
  
  // optional uint32 number_workunits_requested = 5;
  if (has_number_workunits_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->number_workunits_requested(), target);
  }
  
  // optional uint64 submitted_workunit_id = 6;
  if (has_submitted_workunit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->submitted_workunit_id(), target);
  }
  
  // optional bytes additional_data = 7;
  if (has_additional_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->additional_data(), target);
  }
  
  // optional uint32 password_length = 8;
  if (has_password_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->password_length(), target);
  }
  
  // optional uint32 algorithm_type = 9;
  if (has_algorithm_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->algorithm_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MFNRPCRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }
    
    // optional bytes found_password_value = 2;
    if (has_found_password_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->found_password_value());
    }
    
    // optional bytes found_password_hash = 3;
    if (has_found_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->found_password_hash());
    }
    
    // optional uint64 system_cracking_rate = 4;
    if (has_system_cracking_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->system_cracking_rate());
    }
    
    // optional uint32 number_workunits_requested = 5;
    if (has_number_workunits_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_workunits_requested());
    }
    
    // optional uint64 submitted_workunit_id = 6;
    if (has_submitted_workunit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->submitted_workunit_id());
    }
    
    // optional bytes additional_data = 7;
    if (has_additional_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->additional_data());
    }
    
    // optional uint32 password_length = 8;
    if (has_password_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->password_length());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 algorithm_type = 9;
    if (has_algorithm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->algorithm_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MFNRPCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MFNRPCRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MFNRPCRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MFNRPCRequest::MergeFrom(const MFNRPCRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_found_password_value()) {
      set_found_password_value(from.found_password_value());
    }
    if (from.has_found_password_hash()) {
      set_found_password_hash(from.found_password_hash());
    }
    if (from.has_system_cracking_rate()) {
      set_system_cracking_rate(from.system_cracking_rate());
    }
    if (from.has_number_workunits_requested()) {
      set_number_workunits_requested(from.number_workunits_requested());
    }
    if (from.has_submitted_workunit_id()) {
      set_submitted_workunit_id(from.submitted_workunit_id());
    }
    if (from.has_additional_data()) {
      set_additional_data(from.additional_data());
    }
    if (from.has_password_length()) {
      set_password_length(from.password_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_algorithm_type()) {
      set_algorithm_type(from.algorithm_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MFNRPCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFNRPCRequest::CopyFrom(const MFNRPCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFNRPCRequest::IsInitialized() const {
  
  return true;
}

void MFNRPCRequest::Swap(MFNRPCRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(found_password_value_, other->found_password_value_);
    std::swap(found_password_hash_, other->found_password_hash_);
    std::swap(system_cracking_rate_, other->system_cracking_rate_);
    std::swap(number_workunits_requested_, other->number_workunits_requested_);
    std::swap(submitted_workunit_id_, other->submitted_workunit_id_);
    std::swap(additional_data_, other->additional_data_);
    std::swap(password_length_, other->password_length_);
    std::swap(algorithm_type_, other->algorithm_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MFNRPCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MFNRPCRequest_descriptor_;
  metadata.reflection = MFNRPCRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MFNRPCResponse::kResponseTypeIdFieldNumber;
const int MFNRPCResponse::kSystemVersionIdFieldNumber;
const int MFNRPCResponse::kHashTypeIdFieldNumber;
const int MFNRPCResponse::kHashFileIdFieldNumber;
const int MFNRPCResponse::kCharsetIdFieldNumber;
const int MFNRPCResponse::kPasswordLengthFieldNumber;
const int MFNRPCResponse::kAdditionalDataFieldNumber;
#endif  // !_MSC_VER

MFNRPCResponse::MFNRPCResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MFNRPCResponse::InitAsDefaultInstance() {
}

MFNRPCResponse::MFNRPCResponse(const MFNRPCResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MFNRPCResponse::SharedCtor() {
  _cached_size_ = 0;
  response_type_id_ = 0u;
  system_version_id_ = 0u;
  hash_type_id_ = 0u;
  hash_file_id_ = 0u;
  charset_id_ = 0u;
  password_length_ = 0u;
  additional_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MFNRPCResponse::~MFNRPCResponse() {
  SharedDtor();
}

void MFNRPCResponse::SharedDtor() {
  if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
    delete additional_data_;
  }
  if (this != default_instance_) {
  }
}

void MFNRPCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MFNRPCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MFNRPCResponse_descriptor_;
}

const MFNRPCResponse& MFNRPCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MFNNetworkRPC_2eproto();  return *default_instance_;
}

MFNRPCResponse* MFNRPCResponse::default_instance_ = NULL;

MFNRPCResponse* MFNRPCResponse::New() const {
  return new MFNRPCResponse;
}

void MFNRPCResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_type_id_ = 0u;
    system_version_id_ = 0u;
    hash_type_id_ = 0u;
    hash_file_id_ = 0u;
    charset_id_ = 0u;
    password_length_ = 0u;
    if (has_additional_data()) {
      if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
        additional_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MFNRPCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_type_id_)));
          set_has_response_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_system_version_id;
        break;
      }
      
      // optional uint32 system_version_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_version_id_)));
          set_has_system_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hash_type_id;
        break;
      }
      
      // optional uint32 hash_type_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hash_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_type_id_)));
          set_has_hash_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hash_file_id;
        break;
      }
      
      // optional uint32 hash_file_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hash_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_file_id_)));
          set_has_hash_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charset_id;
        break;
      }
      
      // optional uint32 charset_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charset_id_)));
          set_has_charset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_password_length;
        break;
      }
      
      // optional uint32 password_length = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &password_length_)));
          set_has_password_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_additional_data;
        break;
      }
      
      // optional bytes additional_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_additional_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MFNRPCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 response_type_id = 1;
  if (has_response_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response_type_id(), output);
  }
  
  // optional uint32 system_version_id = 2;
  if (has_system_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->system_version_id(), output);
  }
  
  // optional uint32 hash_type_id = 3;
  if (has_hash_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hash_type_id(), output);
  }
  
  // optional uint32 hash_file_id = 4;
  if (has_hash_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hash_file_id(), output);
  }
  
  // optional uint32 charset_id = 5;
  if (has_charset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->charset_id(), output);
  }
  
  // optional uint32 password_length = 6;
  if (has_password_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->password_length(), output);
  }
  
  // optional bytes additional_data = 7;
  if (has_additional_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->additional_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MFNRPCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 response_type_id = 1;
  if (has_response_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response_type_id(), target);
  }
  
  // optional uint32 system_version_id = 2;
  if (has_system_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->system_version_id(), target);
  }
  
  // optional uint32 hash_type_id = 3;
  if (has_hash_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hash_type_id(), target);
  }
  
  // optional uint32 hash_file_id = 4;
  if (has_hash_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hash_file_id(), target);
  }
  
  // optional uint32 charset_id = 5;
  if (has_charset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->charset_id(), target);
  }
  
  // optional uint32 password_length = 6;
  if (has_password_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->password_length(), target);
  }
  
  // optional bytes additional_data = 7;
  if (has_additional_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->additional_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MFNRPCResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 response_type_id = 1;
    if (has_response_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response_type_id());
    }
    
    // optional uint32 system_version_id = 2;
    if (has_system_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_version_id());
    }
    
    // optional uint32 hash_type_id = 3;
    if (has_hash_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash_type_id());
    }
    
    // optional uint32 hash_file_id = 4;
    if (has_hash_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash_file_id());
    }
    
    // optional uint32 charset_id = 5;
    if (has_charset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charset_id());
    }
    
    // optional uint32 password_length = 6;
    if (has_password_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->password_length());
    }
    
    // optional bytes additional_data = 7;
    if (has_additional_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->additional_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MFNRPCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MFNRPCResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MFNRPCResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MFNRPCResponse::MergeFrom(const MFNRPCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_type_id()) {
      set_response_type_id(from.response_type_id());
    }
    if (from.has_system_version_id()) {
      set_system_version_id(from.system_version_id());
    }
    if (from.has_hash_type_id()) {
      set_hash_type_id(from.hash_type_id());
    }
    if (from.has_hash_file_id()) {
      set_hash_file_id(from.hash_file_id());
    }
    if (from.has_charset_id()) {
      set_charset_id(from.charset_id());
    }
    if (from.has_password_length()) {
      set_password_length(from.password_length());
    }
    if (from.has_additional_data()) {
      set_additional_data(from.additional_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MFNRPCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFNRPCResponse::CopyFrom(const MFNRPCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFNRPCResponse::IsInitialized() const {
  
  return true;
}

void MFNRPCResponse::Swap(MFNRPCResponse* other) {
  if (other != this) {
    std::swap(response_type_id_, other->response_type_id_);
    std::swap(system_version_id_, other->system_version_id_);
    std::swap(hash_type_id_, other->hash_type_id_);
    std::swap(hash_file_id_, other->hash_file_id_);
    std::swap(charset_id_, other->charset_id_);
    std::swap(password_length_, other->password_length_);
    std::swap(additional_data_, other->additional_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MFNRPCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MFNRPCResponse_descriptor_;
  metadata.reflection = MFNRPCResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
