// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MFN_Common/MFNWorkunit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MFNWorkunitProtobuf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MFNWorkunitProtobuf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MFNWorkunitProtobuf_SingleWorkunit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MFNWorkunitProtobuf_SingleWorkunit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MFNWorkunit_2eproto() {
  protobuf_AddDesc_MFNWorkunit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MFNWorkunit.proto");
  GOOGLE_CHECK(file != NULL);
  MFNWorkunitProtobuf_descriptor_ = file->message_type(0);
  static const int MFNWorkunitProtobuf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf, workunits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf, workunit_wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf, no_more_workunits_),
  };
  MFNWorkunitProtobuf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MFNWorkunitProtobuf_descriptor_,
      MFNWorkunitProtobuf::default_instance_,
      MFNWorkunitProtobuf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MFNWorkunitProtobuf));
  MFNWorkunitProtobuf_SingleWorkunit_descriptor_ = MFNWorkunitProtobuf_descriptor_->nested_type(0);
  static const int MFNWorkunitProtobuf_SingleWorkunit_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, workunit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, start_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, end_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, workunit_requested_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, workunit_completed_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, is_assigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, password_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, is_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, additional_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, wordlist_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, wordlist_lengths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, wordlist_block_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, number_words_loaded_),
  };
  MFNWorkunitProtobuf_SingleWorkunit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MFNWorkunitProtobuf_SingleWorkunit_descriptor_,
      MFNWorkunitProtobuf_SingleWorkunit::default_instance_,
      MFNWorkunitProtobuf_SingleWorkunit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNWorkunitProtobuf_SingleWorkunit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MFNWorkunitProtobuf_SingleWorkunit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MFNWorkunit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MFNWorkunitProtobuf_descriptor_, &MFNWorkunitProtobuf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MFNWorkunitProtobuf_SingleWorkunit_descriptor_, &MFNWorkunitProtobuf_SingleWorkunit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MFNWorkunit_2eproto() {
  delete MFNWorkunitProtobuf::default_instance_;
  delete MFNWorkunitProtobuf_reflection_;
  delete MFNWorkunitProtobuf_SingleWorkunit::default_instance_;
  delete MFNWorkunitProtobuf_SingleWorkunit_reflection_;
}

void protobuf_AddDesc_MFNWorkunit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MFNWorkunit.proto\"\203\004\n\023MFNWorkunitProto"
    "buf\0226\n\tworkunits\030\001 \003(\0132#.MFNWorkunitProt"
    "obuf.SingleWorkunit\022\025\n\rworkunit_wait\030\002 \001"
    "(\r\022\031\n\021no_more_workunits\030\003 \001(\r\032\201\003\n\016Single"
    "Workunit\022\023\n\013workunit_id\030\001 \001(\004\022\023\n\013start_p"
    "oint\030\002 \001(\004\022\021\n\tend_point\030\003 \001(\004\022$\n\034workuni"
    "t_requested_timestamp\030\004 \001(\001\022$\n\034workunit_"
    "completed_timestamp\030\005 \001(\001\022\021\n\tclient_id\030\006"
    " \001(\r\022\023\n\013is_assigned\030\007 \001(\r\022\027\n\017password_le"
    "ngth\030\010 \001(\r\022\020\n\010is_valid\030\t \001(\r\022\r\n\005flags\030\n "
    "\001(\r\022\027\n\017additional_data\030\013 \001(\014\022\025\n\rwordlist"
    "_data\030\014 \001(\014\022\030\n\020wordlist_lengths\030\r \001(\014\022\035\n"
    "\025wordlist_block_length\030\016 \001(\r\022\033\n\023number_w"
    "ords_loaded\030\017 \001(\r", 537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MFNWorkunit.proto", &protobuf_RegisterTypes);
  MFNWorkunitProtobuf::default_instance_ = new MFNWorkunitProtobuf();
  MFNWorkunitProtobuf_SingleWorkunit::default_instance_ = new MFNWorkunitProtobuf_SingleWorkunit();
  MFNWorkunitProtobuf::default_instance_->InitAsDefaultInstance();
  MFNWorkunitProtobuf_SingleWorkunit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MFNWorkunit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MFNWorkunit_2eproto {
  StaticDescriptorInitializer_MFNWorkunit_2eproto() {
    protobuf_AddDesc_MFNWorkunit_2eproto();
  }
} static_descriptor_initializer_MFNWorkunit_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MFNWorkunitProtobuf_SingleWorkunit::kWorkunitIdFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kStartPointFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kEndPointFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kWorkunitRequestedTimestampFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kWorkunitCompletedTimestampFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kClientIdFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kIsAssignedFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kPasswordLengthFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kIsValidFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kFlagsFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kAdditionalDataFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kWordlistDataFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kWordlistLengthsFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kWordlistBlockLengthFieldNumber;
const int MFNWorkunitProtobuf_SingleWorkunit::kNumberWordsLoadedFieldNumber;
#endif  // !_MSC_VER

MFNWorkunitProtobuf_SingleWorkunit::MFNWorkunitProtobuf_SingleWorkunit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MFNWorkunitProtobuf_SingleWorkunit::InitAsDefaultInstance() {
}

MFNWorkunitProtobuf_SingleWorkunit::MFNWorkunitProtobuf_SingleWorkunit(const MFNWorkunitProtobuf_SingleWorkunit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MFNWorkunitProtobuf_SingleWorkunit::SharedCtor() {
  _cached_size_ = 0;
  workunit_id_ = GOOGLE_ULONGLONG(0);
  start_point_ = GOOGLE_ULONGLONG(0);
  end_point_ = GOOGLE_ULONGLONG(0);
  workunit_requested_timestamp_ = 0;
  workunit_completed_timestamp_ = 0;
  client_id_ = 0u;
  is_assigned_ = 0u;
  password_length_ = 0u;
  is_valid_ = 0u;
  flags_ = 0u;
  additional_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wordlist_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wordlist_lengths_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wordlist_block_length_ = 0u;
  number_words_loaded_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MFNWorkunitProtobuf_SingleWorkunit::~MFNWorkunitProtobuf_SingleWorkunit() {
  SharedDtor();
}

void MFNWorkunitProtobuf_SingleWorkunit::SharedDtor() {
  if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
    delete additional_data_;
  }
  if (wordlist_data_ != &::google::protobuf::internal::kEmptyString) {
    delete wordlist_data_;
  }
  if (wordlist_lengths_ != &::google::protobuf::internal::kEmptyString) {
    delete wordlist_lengths_;
  }
  if (this != default_instance_) {
  }
}

void MFNWorkunitProtobuf_SingleWorkunit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MFNWorkunitProtobuf_SingleWorkunit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MFNWorkunitProtobuf_SingleWorkunit_descriptor_;
}

const MFNWorkunitProtobuf_SingleWorkunit& MFNWorkunitProtobuf_SingleWorkunit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MFNWorkunit_2eproto();  return *default_instance_;
}

MFNWorkunitProtobuf_SingleWorkunit* MFNWorkunitProtobuf_SingleWorkunit::default_instance_ = NULL;

MFNWorkunitProtobuf_SingleWorkunit* MFNWorkunitProtobuf_SingleWorkunit::New() const {
  return new MFNWorkunitProtobuf_SingleWorkunit;
}

void MFNWorkunitProtobuf_SingleWorkunit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    workunit_id_ = GOOGLE_ULONGLONG(0);
    start_point_ = GOOGLE_ULONGLONG(0);
    end_point_ = GOOGLE_ULONGLONG(0);
    workunit_requested_timestamp_ = 0;
    workunit_completed_timestamp_ = 0;
    client_id_ = 0u;
    is_assigned_ = 0u;
    password_length_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_valid_ = 0u;
    flags_ = 0u;
    if (has_additional_data()) {
      if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
        additional_data_->clear();
      }
    }
    if (has_wordlist_data()) {
      if (wordlist_data_ != &::google::protobuf::internal::kEmptyString) {
        wordlist_data_->clear();
      }
    }
    if (has_wordlist_lengths()) {
      if (wordlist_lengths_ != &::google::protobuf::internal::kEmptyString) {
        wordlist_lengths_->clear();
      }
    }
    wordlist_block_length_ = 0u;
    number_words_loaded_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MFNWorkunitProtobuf_SingleWorkunit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 workunit_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &workunit_id_)));
          set_has_workunit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_point;
        break;
      }
      
      // optional uint64 start_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_point_)));
          set_has_start_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_point;
        break;
      }
      
      // optional uint64 end_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_point_)));
          set_has_end_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_workunit_requested_timestamp;
        break;
      }
      
      // optional double workunit_requested_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_workunit_requested_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &workunit_requested_timestamp_)));
          set_has_workunit_requested_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_workunit_completed_timestamp;
        break;
      }
      
      // optional double workunit_completed_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_workunit_completed_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &workunit_completed_timestamp_)));
          set_has_workunit_completed_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_client_id;
        break;
      }
      
      // optional uint32 client_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_assigned;
        break;
      }
      
      // optional uint32 is_assigned = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_assigned_)));
          set_has_is_assigned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_password_length;
        break;
      }
      
      // optional uint32 password_length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &password_length_)));
          set_has_password_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_valid;
        break;
      }
      
      // optional uint32 is_valid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_valid_)));
          set_has_is_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_additional_data;
        break;
      }
      
      // optional bytes additional_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_additional_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_wordlist_data;
        break;
      }
      
      // optional bytes wordlist_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wordlist_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wordlist_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_wordlist_lengths;
        break;
      }
      
      // optional bytes wordlist_lengths = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wordlist_lengths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wordlist_lengths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wordlist_block_length;
        break;
      }
      
      // optional uint32 wordlist_block_length = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wordlist_block_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wordlist_block_length_)));
          set_has_wordlist_block_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_number_words_loaded;
        break;
      }
      
      // optional uint32 number_words_loaded = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_words_loaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_words_loaded_)));
          set_has_number_words_loaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MFNWorkunitProtobuf_SingleWorkunit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 workunit_id = 1;
  if (has_workunit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->workunit_id(), output);
  }
  
  // optional uint64 start_point = 2;
  if (has_start_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_point(), output);
  }
  
  // optional uint64 end_point = 3;
  if (has_end_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_point(), output);
  }
  
  // optional double workunit_requested_timestamp = 4;
  if (has_workunit_requested_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->workunit_requested_timestamp(), output);
  }
  
  // optional double workunit_completed_timestamp = 5;
  if (has_workunit_completed_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->workunit_completed_timestamp(), output);
  }
  
  // optional uint32 client_id = 6;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_id(), output);
  }
  
  // optional uint32 is_assigned = 7;
  if (has_is_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_assigned(), output);
  }
  
  // optional uint32 password_length = 8;
  if (has_password_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->password_length(), output);
  }
  
  // optional uint32 is_valid = 9;
  if (has_is_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->is_valid(), output);
  }
  
  // optional uint32 flags = 10;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->flags(), output);
  }
  
  // optional bytes additional_data = 11;
  if (has_additional_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->additional_data(), output);
  }
  
  // optional bytes wordlist_data = 12;
  if (has_wordlist_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->wordlist_data(), output);
  }
  
  // optional bytes wordlist_lengths = 13;
  if (has_wordlist_lengths()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->wordlist_lengths(), output);
  }
  
  // optional uint32 wordlist_block_length = 14;
  if (has_wordlist_block_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->wordlist_block_length(), output);
  }
  
  // optional uint32 number_words_loaded = 15;
  if (has_number_words_loaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->number_words_loaded(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MFNWorkunitProtobuf_SingleWorkunit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 workunit_id = 1;
  if (has_workunit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->workunit_id(), target);
  }
  
  // optional uint64 start_point = 2;
  if (has_start_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_point(), target);
  }
  
  // optional uint64 end_point = 3;
  if (has_end_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_point(), target);
  }
  
  // optional double workunit_requested_timestamp = 4;
  if (has_workunit_requested_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->workunit_requested_timestamp(), target);
  }
  
  // optional double workunit_completed_timestamp = 5;
  if (has_workunit_completed_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->workunit_completed_timestamp(), target);
  }
  
  // optional uint32 client_id = 6;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_id(), target);
  }
  
  // optional uint32 is_assigned = 7;
  if (has_is_assigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_assigned(), target);
  }
  
  // optional uint32 password_length = 8;
  if (has_password_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->password_length(), target);
  }
  
  // optional uint32 is_valid = 9;
  if (has_is_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->is_valid(), target);
  }
  
  // optional uint32 flags = 10;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->flags(), target);
  }
  
  // optional bytes additional_data = 11;
  if (has_additional_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->additional_data(), target);
  }
  
  // optional bytes wordlist_data = 12;
  if (has_wordlist_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->wordlist_data(), target);
  }
  
  // optional bytes wordlist_lengths = 13;
  if (has_wordlist_lengths()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->wordlist_lengths(), target);
  }
  
  // optional uint32 wordlist_block_length = 14;
  if (has_wordlist_block_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->wordlist_block_length(), target);
  }
  
  // optional uint32 number_words_loaded = 15;
  if (has_number_words_loaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->number_words_loaded(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MFNWorkunitProtobuf_SingleWorkunit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 workunit_id = 1;
    if (has_workunit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->workunit_id());
    }
    
    // optional uint64 start_point = 2;
    if (has_start_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_point());
    }
    
    // optional uint64 end_point = 3;
    if (has_end_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_point());
    }
    
    // optional double workunit_requested_timestamp = 4;
    if (has_workunit_requested_timestamp()) {
      total_size += 1 + 8;
    }
    
    // optional double workunit_completed_timestamp = 5;
    if (has_workunit_completed_timestamp()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 client_id = 6;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_id());
    }
    
    // optional uint32 is_assigned = 7;
    if (has_is_assigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_assigned());
    }
    
    // optional uint32 password_length = 8;
    if (has_password_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->password_length());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 is_valid = 9;
    if (has_is_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_valid());
    }
    
    // optional uint32 flags = 10;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // optional bytes additional_data = 11;
    if (has_additional_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->additional_data());
    }
    
    // optional bytes wordlist_data = 12;
    if (has_wordlist_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wordlist_data());
    }
    
    // optional bytes wordlist_lengths = 13;
    if (has_wordlist_lengths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wordlist_lengths());
    }
    
    // optional uint32 wordlist_block_length = 14;
    if (has_wordlist_block_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wordlist_block_length());
    }
    
    // optional uint32 number_words_loaded = 15;
    if (has_number_words_loaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_words_loaded());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MFNWorkunitProtobuf_SingleWorkunit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MFNWorkunitProtobuf_SingleWorkunit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MFNWorkunitProtobuf_SingleWorkunit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MFNWorkunitProtobuf_SingleWorkunit::MergeFrom(const MFNWorkunitProtobuf_SingleWorkunit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workunit_id()) {
      set_workunit_id(from.workunit_id());
    }
    if (from.has_start_point()) {
      set_start_point(from.start_point());
    }
    if (from.has_end_point()) {
      set_end_point(from.end_point());
    }
    if (from.has_workunit_requested_timestamp()) {
      set_workunit_requested_timestamp(from.workunit_requested_timestamp());
    }
    if (from.has_workunit_completed_timestamp()) {
      set_workunit_completed_timestamp(from.workunit_completed_timestamp());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_is_assigned()) {
      set_is_assigned(from.is_assigned());
    }
    if (from.has_password_length()) {
      set_password_length(from.password_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_valid()) {
      set_is_valid(from.is_valid());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_additional_data()) {
      set_additional_data(from.additional_data());
    }
    if (from.has_wordlist_data()) {
      set_wordlist_data(from.wordlist_data());
    }
    if (from.has_wordlist_lengths()) {
      set_wordlist_lengths(from.wordlist_lengths());
    }
    if (from.has_wordlist_block_length()) {
      set_wordlist_block_length(from.wordlist_block_length());
    }
    if (from.has_number_words_loaded()) {
      set_number_words_loaded(from.number_words_loaded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MFNWorkunitProtobuf_SingleWorkunit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFNWorkunitProtobuf_SingleWorkunit::CopyFrom(const MFNWorkunitProtobuf_SingleWorkunit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFNWorkunitProtobuf_SingleWorkunit::IsInitialized() const {
  
  return true;
}

void MFNWorkunitProtobuf_SingleWorkunit::Swap(MFNWorkunitProtobuf_SingleWorkunit* other) {
  if (other != this) {
    std::swap(workunit_id_, other->workunit_id_);
    std::swap(start_point_, other->start_point_);
    std::swap(end_point_, other->end_point_);
    std::swap(workunit_requested_timestamp_, other->workunit_requested_timestamp_);
    std::swap(workunit_completed_timestamp_, other->workunit_completed_timestamp_);
    std::swap(client_id_, other->client_id_);
    std::swap(is_assigned_, other->is_assigned_);
    std::swap(password_length_, other->password_length_);
    std::swap(is_valid_, other->is_valid_);
    std::swap(flags_, other->flags_);
    std::swap(additional_data_, other->additional_data_);
    std::swap(wordlist_data_, other->wordlist_data_);
    std::swap(wordlist_lengths_, other->wordlist_lengths_);
    std::swap(wordlist_block_length_, other->wordlist_block_length_);
    std::swap(number_words_loaded_, other->number_words_loaded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MFNWorkunitProtobuf_SingleWorkunit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MFNWorkunitProtobuf_SingleWorkunit_descriptor_;
  metadata.reflection = MFNWorkunitProtobuf_SingleWorkunit_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MFNWorkunitProtobuf::kWorkunitsFieldNumber;
const int MFNWorkunitProtobuf::kWorkunitWaitFieldNumber;
const int MFNWorkunitProtobuf::kNoMoreWorkunitsFieldNumber;
#endif  // !_MSC_VER

MFNWorkunitProtobuf::MFNWorkunitProtobuf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MFNWorkunitProtobuf::InitAsDefaultInstance() {
}

MFNWorkunitProtobuf::MFNWorkunitProtobuf(const MFNWorkunitProtobuf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MFNWorkunitProtobuf::SharedCtor() {
  _cached_size_ = 0;
  workunit_wait_ = 0u;
  no_more_workunits_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MFNWorkunitProtobuf::~MFNWorkunitProtobuf() {
  SharedDtor();
}

void MFNWorkunitProtobuf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MFNWorkunitProtobuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MFNWorkunitProtobuf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MFNWorkunitProtobuf_descriptor_;
}

const MFNWorkunitProtobuf& MFNWorkunitProtobuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MFNWorkunit_2eproto();  return *default_instance_;
}

MFNWorkunitProtobuf* MFNWorkunitProtobuf::default_instance_ = NULL;

MFNWorkunitProtobuf* MFNWorkunitProtobuf::New() const {
  return new MFNWorkunitProtobuf;
}

void MFNWorkunitProtobuf::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    workunit_wait_ = 0u;
    no_more_workunits_ = 0u;
  }
  workunits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MFNWorkunitProtobuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MFNWorkunitProtobuf.SingleWorkunit workunits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workunits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workunits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_workunits;
        if (input->ExpectTag(16)) goto parse_workunit_wait;
        break;
      }
      
      // optional uint32 workunit_wait = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_workunit_wait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workunit_wait_)));
          set_has_workunit_wait();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_no_more_workunits;
        break;
      }
      
      // optional uint32 no_more_workunits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_more_workunits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_more_workunits_)));
          set_has_no_more_workunits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MFNWorkunitProtobuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MFNWorkunitProtobuf.SingleWorkunit workunits = 1;
  for (int i = 0; i < this->workunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->workunits(i), output);
  }
  
  // optional uint32 workunit_wait = 2;
  if (has_workunit_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->workunit_wait(), output);
  }
  
  // optional uint32 no_more_workunits = 3;
  if (has_no_more_workunits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->no_more_workunits(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MFNWorkunitProtobuf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MFNWorkunitProtobuf.SingleWorkunit workunits = 1;
  for (int i = 0; i < this->workunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->workunits(i), target);
  }
  
  // optional uint32 workunit_wait = 2;
  if (has_workunit_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->workunit_wait(), target);
  }
  
  // optional uint32 no_more_workunits = 3;
  if (has_no_more_workunits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->no_more_workunits(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MFNWorkunitProtobuf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 workunit_wait = 2;
    if (has_workunit_wait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workunit_wait());
    }
    
    // optional uint32 no_more_workunits = 3;
    if (has_no_more_workunits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_more_workunits());
    }
    
  }
  // repeated .MFNWorkunitProtobuf.SingleWorkunit workunits = 1;
  total_size += 1 * this->workunits_size();
  for (int i = 0; i < this->workunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->workunits(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MFNWorkunitProtobuf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MFNWorkunitProtobuf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MFNWorkunitProtobuf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MFNWorkunitProtobuf::MergeFrom(const MFNWorkunitProtobuf& from) {
  GOOGLE_CHECK_NE(&from, this);
  workunits_.MergeFrom(from.workunits_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_workunit_wait()) {
      set_workunit_wait(from.workunit_wait());
    }
    if (from.has_no_more_workunits()) {
      set_no_more_workunits(from.no_more_workunits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MFNWorkunitProtobuf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFNWorkunitProtobuf::CopyFrom(const MFNWorkunitProtobuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFNWorkunitProtobuf::IsInitialized() const {
  
  return true;
}

void MFNWorkunitProtobuf::Swap(MFNWorkunitProtobuf* other) {
  if (other != this) {
    workunits_.Swap(&other->workunits_);
    std::swap(workunit_wait_, other->workunit_wait_);
    std::swap(no_more_workunits_, other->no_more_workunits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MFNWorkunitProtobuf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MFNWorkunitProtobuf_descriptor_;
  metadata.reflection = MFNWorkunitProtobuf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
